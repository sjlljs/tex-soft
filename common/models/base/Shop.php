<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace common\models\base;

use Yii;
use yii\behaviors\TimestampBehavior;

/**
 * This is the base-model class for table "shop".
 *
 * @property integer $id
 * @property integer $firm_id
 * @property string $name
 * @property string $phone
 * @property string $address
 * @property string $ispolnitel
 * @property string $logo
 * @property string $firm_name
 * @property integer $workshop
 * @property integer $master_choice
 * @property integer $minus_zp
 * @property integer $his_clients
 * @property integer $sms
 * @property integer $active
 * @property integer $ticket_type
 * @property integer $hurry
 * @property integer $discount
 * @property integer $complex
 * @property integer $workshop_choice
 * @property integer $defect
 * @property integer $deleted
 * @property string $created_at
 *
 * @property \common\models\Firm $firm
 * @property string $aliasModel
 */
abstract class Shop extends \yii\db\ActiveRecord
{



    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%shop}}';
    }


    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::className(),
                'updatedAtAttribute' => false,
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['firm_id', 'workshop', 'master_choice', 'minus_zp', 'his_clients', 'sms', 'active', 'ticket_type', 'hurry', 'discount', 'complex', 'workshop_choice', 'defect', 'deleted'], 'integer'],
            [['phone', 'address', 'ispolnitel', 'logo'], 'string'],
            [['name', 'firm_name'], 'string', 'max' => 100],
            [['firm_id'], 'exist', 'skipOnError' => true, 'targetClass' => \common\models\Firm::className(), 'targetAttribute' => ['firm_id' => 'id']]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'firm_id' => 'какой фирме принадлежит',
            'name' => 'Name',
            'phone' => 'Phone',
            'address' => 'Адрес',
            'ispolnitel' => 'Ispolnitel',
            'logo' => 'путь к логотипу',
            'firm_name' => 'Firm Name',
            'workshop' => 'цех или нет',
            'master_choice' => 'доступен выбор мастера/нет выбора',
            'minus_zp' => 'вычет перед расчетом зарплаты, %',
            'his_clients' => 'использовать свой список клиентов или общедоступный',
            'sms' => 'отправлять смс или нет',
            'active' => 'активен/неактивен',
            'ticket_type' => 'тип квитанции',
            'hurry' => 'брать срочные заказы/не брать',
            'discount' => 'вводить скидки/нет',
            'complex' => 'выбор срочности-сложности/нет выбора',
            'workshop_choice' => 'доступен выбор цеха/нет выбора',
            'defect' => 'дефектовка',
            'created_at' => 'время создания',
            'deleted' => 'Deleted',
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeHints()
    {
        return array_merge(parent::attributeHints(), [
            'firm_id' => 'какой фирме принадлежит',
            'address' => 'Адрес',
            'logo' => 'путь к логотипу',
            'workshop' => 'цех или нет',
            'master_choice' => 'доступен выбор мастера/нет выбора',
            'minus_zp' => 'вычет перед расчетом зарплаты, %',
            'his_clients' => 'использовать свой список клиентов или общедоступный',
            'sms' => 'отправлять смс или нет',
            'active' => 'активен/неактивен',
            'ticket_type' => 'тип квитанции',
            'hurry' => 'брать срочные заказы/не брать',
            'discount' => 'вводить скидки/нет',
            'complex' => 'выбор срочности-сложности/нет выбора',
            'workshop_choice' => 'доступен выбор цеха/нет выбора',
            'defect' => 'дефектовка',
            'created_at' => 'время создания',
        ]);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getFirm()
    {
        return $this->hasOne(\common\models\Firm::className(), ['id' => 'firm_id']);
    }


    
    /**
     * @inheritdoc
     * @return \common\models\query\ShopQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new \common\models\query\ShopQuery(get_called_class());
    }


}
